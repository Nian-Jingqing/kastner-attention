%% add your paths here.

% add paths for Feng
addpath('/snel/home/fzhu23/bin/LFADS/lfads-run-manager/src')
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/myTools/kastner_analysis_tools')
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/codes')
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/myTools')
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/myTools/jPCA_tools')

%% test jPCA code
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/myTools/jPCA_tools/fromMarksLibraries')
addpath('/snel/home/fzhu23/Projects/Pulvinar/old_pulvinarRepo/Kastner_Attention/myTools/jPCA_tools/CircStat2010d')

load exampleData
jPCA_params.softenNorm = 5;
jPCA_params.suppressBWrosettes = true;
jPCA_params.suppressHistograms = true;
%%
times = 50:10:300;
jPCA_params.numPCs = 6;
[Projection, Summary] = jPCA(Data, times, jPCA_params);
%%
phaseSpace(Projection,Summary);
printFigs(gcf, '.', '-dpdf', 'Basic jPCA plot');

%%
buildRuns_20180614

%%
loadChoppedCombined_twoLocations
 
%% load and preprocess LFP
loadLFP_twoLocations

%% make a place to store output videos
outdir = '/Users/feng/SNEL/tmp/kastnervid/';
if ~isdir( outdir )
    mkdir( outdir );
end

%% only on laptop
% load data from file
%cp_paths_laptop
%load ~/tmp/forPlotting

%% fix any weirdness with zeros in the ALF
for nd = 1:6
    for ntr = 1:numel(alf{nd})
        alf{nd}(ntr).rates(alf{nd}(ntr).rates==0) = nan;
        alf{nd}(ntr).rt = UEs{nd}.rt( ntr );
    end
end


%%
% number of trials for each day
numTrialsTot = cellfun( @numel, alf );


% %  trials we want have the UE2.arrayShapesCorrect string 'HRHR'
% %  they must also be hold trials, i.e. UE2.isHoldTrial


for nday = 1 : numel( alf )
    isCorrectArray{ nday } = arrayfun(@(x) strcmp(x, 'HRHR'), UEs{ nday }.arrayShapesCorrect);
    trialsToKeep{ nday } = isCorrectArray{ nday } & (~[lfp{ nday }.isTrialOutlier])';

    cueLocs{ nday } = unique(UEs{ nday }.cueLoc);

    for nc = 1 : numel( cueLocs{ nday } )
        trialsByCueLoc{ nday }{nc} = find( trialsToKeep{ nday } & (UEs{ nday }.cueLoc==cueLocs{ nday }(nc)));
        rtsByCueLoc{ nday }{nc} = UEs{ nday }.rt( trialsByCueLoc{ nday }{nc} );    
    end
end

%%

% concatenate all the factors

% % this window was used for finding oscillations during arrayDelay in
% %         factors 6 7 8 for session 6
%window = round( [-300  00] / binsize_rescaled );



%window = round( [-1200 : 500] / binsize );
window = round( [-200 1200] / binsize_rescaled );

%whichfieldDimred = 'arrayDim';
whichfieldDimred = 'arrayOnset';

window_lfp = round( [400 700] / binsize_rescaled );

%whichfieldPlot = 'arrayDim';
%newWindow = round( [-900  650] / binsize_rescaled );



whichfieldPlot = 'arrayOnset';
newWindow = round( [-200  1100] / binsize_rescaled );


%whichfieldPlot = 'cueOnset';
%newWindow = round( [-200  1200] / binsize_rescaled );


%% get factors into struct to prepare for jPCA
timePoints = window(1):window(2);
timePoints_lfp = window_lfp(1):window_lfp(2);
numBins = numel( timePoints);
numFactors = size( alf{ nday }(1).rates, 1);
totalTrialsToKeep = sum( cellfun( @sum, trialsToKeep ) );
%allFactors = zeros( numFactors, numBins * totalTrialsToKeep );
%%
clear dataForJPCA
dataForJPCA(totalTrialsToKeep).A = 0;
ind = 1;
for nday = 1:numel( alf )
    trialsToKeepInds{ nday } = find( trialsToKeep{ nday } );
    for itr = 1:numel( trialsToKeepInds{ nday } )
        ntr = trialsToKeepInds{ nday }( itr );
        dataForJPCA(ind).A = alf{ nday }( ntr ).rates( :, alf{ nday }( ntr ).( whichfieldDimred ) + timePoints );
        dataForJPCA(ind).A = dataForJPCA(ind).A';
        dataForJPCA(ind).times = timePoints*binsize_rescaled;
        dataForJPCA(ind).times = dataForJPCA(ind).times';
        ind = ind + 1;
    end
end

%% pick up correct trials, filter, resample and chop LFP
filtHighCutoff = 15;
filtLowCutoff = 2;
Fs = 1000;
chopResampled_lfp(totalTrialsToKeep).lfps = 0;
ind = 1;
for nday = 1:numel( lfp )
    trialsToKeepInds{ nday } = find( trialsToKeep{ nday } );
    for itr = 1:numel( trialsToKeepInds{ nday } )
        ntr = trialsToKeepInds{ nday }( itr );
        tmp_filteredLFP = bandpassFilter_singleTrial( lfp{ nday }( ntr ).lfps, filtHighCutoff, filtLowCutoff, Fs);
        tmp_resampledLFP = (resample(tmp_filteredLFP', 1,binsize_rescaled))';
        chopResampled_lfp(ind).lfps = tmp_resampledLFP( :, alf{ nday }( ntr ).( whichfieldDimred ) + timePoints_lfp );
        ind = ind + 1;
    end
end


%% perform jPCA
jPCA_params.softenNorm = 5;
jPCA_params.suppressBWrosettes = true;
jPCA_params.suppressHistograms = true;
%%
times = 400:8:700;
jPCA_params.numPCs = 12;
[Projection, Summary] = jPCA(dataForJPCA, times, jPCA_params);
%%
plotParams.planes2plot = [ 1 2 3 ];
phaseSpace(Projection,Summary, plotParams);

%%
savedir = '/snel/share/share/derived/kastner/LFADS_runs/pulvinar/Multi-day/multiDay_CO_AO_TD_HoldRel_JanToApr/postAnalysis/withExternalInput_20180614/jPCA/';
cd(savedir)
printFigs(gcf, '.', '-dpdf', '400To500ms_plane1');

%% get projections from jPCA
%dimId = 1;
%proj_rates(numel(Projection)). = 0;
%for nTrial = 1 : numel(Projection)
    %proj_rates(nTrial) = Projection(nTrial).proj(:, dimId)';
    %end

%%
trialsToKeepEachDay = cellfun( @sum, trialsToKeep );
%%
maxLag = 200;
ind = 0;
crossCorr{ numel( alf ) } = [];
for nday = 1:numel( alf )
    trialIds = ( ind + 1 ):( ind + trialsToKeepEachDay( nday ));
    for n = 1 : size(lfp{ nday }(1).lfps, 1)
        for nTrial = 1 : numel( trialIds )
            for dimId = 1 : 4
                fieldToStore = ['dim' num2str(dimId)];
                crossCorr{ nday }( n ).( fieldToStore )( nTrial, :) = xcorr(Projection( trialIds( nTrial ) ).proj( :, dimId)', chopResampled_lfp( trialIds( nTrial ) ).lfps( n, :), maxLag/binsize_rescaled);
            end
        end
    end
    ind = ind + trialsToKeepEachDay( nday );
end

                
%% plotting cross-correlation

savedir2_base = '/snel/share/share/derived/kastner/LFADS_runs/pulvinar/Multi-day/multiDay_CO_AO_TD_HoldRel_JanToApr/postAnalysis/withExternalInput_20180614/jPCA_LFP/';

clear set
timeLagStr = num2str(maxLag);
for nday = 1 : numel( crossCorr )
    savedir2 = [savedir2_base datasets( nday ).shortName];
    for n = 1 : numel( crossCorr{ nday } )
        f1 = figure;
        sp1 = subplot(2,2,1);
        shadedErrorBar([], crossCorr{ nday }( n ).dim1, {@mean, @(x) std(x)./sqrt(size(crossCorr{ nday }( n ).dim1, 1)) }, 'lineProps', '-r')
        set(gca,'XTick',[1 0.5*size(crossCorr{ nday }( n ).dim1, 2) size(crossCorr{ nday }( n ).dim1, 2)]);
        timeStrLeft = ['-', timeLagStr];
        timeStrRight = ['+', timeLagStr];
        set(gca,'XTickLabels',{timeStrLeft,'0',timeStrRight});
        set(gca,'XLim',[0 size(crossCorr{ nday }( n ).dim1, 2)]);
        ylabel('cross-correlation');
        title('Dim 1');
        hold on
        
        sp2 = subplot(2,2,2);
        shadedErrorBar([], crossCorr{ nday }( n ).dim2, {@mean, @(x) std(x)./sqrt(size(crossCorr{ nday }( n ).dim2, 1)) }, 'lineProps', '-r')
        set(gca,'XTick',[1 0.5*size(crossCorr{ nday }( n ).dim2, 2) size(crossCorr{ nday }( n ).dim2, 2)]);
        timeStrLeft = ['-', timeLagStr];
        timeStrRight = ['+', timeLagStr];
        set(gca,'XTickLabels',{timeStrLeft,'0',timeStrRight});
        set(gca,'XLim',[0 size(crossCorr{ nday }( n ).dim2, 2)]);
        ylabel('cross-correlation');
        title('Dim 2');
        hold on

        sp3 = subplot(2,2,3)
        shadedErrorBar([], crossCorr{ nday }( n ).dim3, {@mean, @(x) std(x)./sqrt(size(crossCorr{ nday }( n ).dim3, 1)) }, 'lineProps', '-r')
        set(gca,'XTick',[1 0.5*size(crossCorr{ nday }( n ).dim3, 2) size(crossCorr{ nday }( n ).dim3, 2)]);
        timeStrLeft = ['-', timeLagStr];
        timeStrRight = ['+', timeLagStr];
        set(gca,'XTickLabels',{timeStrLeft,'0',timeStrRight});
        set(gca,'XLim',[0 size(crossCorr{ nday }( n ).dim3, 2)]);
        ylabel('cross-correlation');
        title('Dim 3');
        hold on

        sp4 = subplot(2,2,4)
        shadedErrorBar([], crossCorr{ nday }( n ).dim4, {@mean, @(x) std(x)./sqrt(size(crossCorr{ nday }( n ).dim4, 1)) }, 'lineProps', '-r')
        set(gca,'XTick',[1 0.5*size(crossCorr{ nday }( n ).dim4, 2) size(crossCorr{ nday }( n ).dim4, 2)]);
        timeStrLeft = ['-', timeLagStr];
        timeStrRight = ['+', timeLagStr];
        set(gca,'XTickLabels',{timeStrLeft,'0',timeStrRight});
        set(gca,'XLim',[0 size(crossCorr{ nday }( n ).dim4, 2)]);
        ylabel('cross-correlation');
        title('Dim 4');
        
        suptitle(['Cross Correlation for LFP channel ' int2str(n)]);
        set(f1, 'Position', [229 79 1573 887]);
        cd(savedir2)
        print(f1,['Channel ' int2str(n)], '-dpng');
        close
    end
end



%% dimred based on all days
numBins = numel( window );
numFactors = size( alf{ nday }(1).rates, 1);
totalTrialsToKeep = sum( cellfun( @sum, trialsToKeep ) );
allFactors = zeros( numFactors, numBins * totalTrialsToKeep );

%

for nday = 1 : numel( alf)
    ind = 1;
    trialsToKeepInds{ nday } = find( trialsToKeep{ nday } );
    for itr = 1:numel( trialsToKeepInds{ nday } )
        ntr = trialsToKeepInds{ nday }( itr );
        allFactors( :, (0:numBins-1) + ind ) = alf{ nday }( ntr ).rates( :, alf{ nday }( ntr ).( whichfieldDimred ) + window );
        ind = ind + numBins;
    end
end 

%% do pca
meanFactors = mean( allFactors' );

[pca_proj_mat, pc_data] = pca( allFactors', 'NumComponents', 10);



%% %  % plot
cmap = lines();
% which pcs to plot?
p2p = [1 2 3];
%paxis=[-2.1342   -0.6698   -2.5038    1.0200   -1.3868    1.3984];
%paxis = [-1.7655   -0.7427   -1.8530    0.4962   -0.5494    1.3074];

%paxis([1 3 5] ) = paxis([1 3 5])*2;
%paxis = [-1.4930   -0.6525   -1.7117    1.1907   -1.0502    2.2128];

%p2p = [4 5 6];
%paxis = [-1.2255    0.8949   -1.0455    0.9195   -1.1087    1.3748];



% p2p = [7 8 9];
p2p = [6 7 8];
pmin1 = min(pc_data(:, p2p(1)));
pmax1 = max(pc_data(:, p2p(1)));
pmin2 = min(pc_data(:, p2p(2)));
pmax2 = max(pc_data(:, p2p(2)));
pmin3 = min(pc_data(:, p2p(3)));
pmax3 = max(pc_data(:, p2p(3)));
paxis = [pmin1 pmax1 pmin2 pmax2 pmin3 pmax3];

% p2p = [10 11 12 ];
%p2p = [13 14 15 ];


window = newWindow(1):newWindow(2);
numBins = numel( window );

arrayOnsetBin = find( window == min( [ window(end) 0 ] ) );

rtRatios = [];

splitplot = 1;
nplots=3;
clf;
if ~splitplot
%    set(gcf,'position',[204    85   924   793]);
else
%    set(gcf, 'position', [4         271        1349         603]);
end


% trail length in bins
trail_length = 20;


%
for nt = 1 : 5 :numel( window )

    clf;
    for nday = 1 : numel( alf )
        
        for itr = 1:numel( trialsToKeepInds{ nday } )
            ntr = trialsToKeepInds{ nday }( itr );
            cueInd = find( cueLocs{nday} == UEs{nday}.cueLoc( ntr ) );
            allRtsThisLoc = rtsByCueLoc{nday}{ cueInd };
            thisTrialRt = UEs{nday}.rt( ntr );

            if cueInd == 1
                continue;
            end
            delayTime = (alf{nday}(ntr).arrayDim - alf{nday}(ntr).arrayOnset) * binsize_rescaled;
            %if delayTime >700
            %    continue
            %end

            sortedRts = sort( allRtsThisLoc, 'ascend' );
            thisRtInd = max( find( sortedRts == thisTrialRt ) );
            thisRtRatio = thisRtInd / numel( sortedRts );
            rtRatios(itr) = thisRtRatio;

            % % cut out medium RT trials
            %if thisRtRatio > 0.4 & thisRtRatio < 0.6
            %    continue
            %end
            %if thisRtRatio > 0.4
            %    continue
            %end

            if splitplot
                if thisRtRatio <= 0.5
                    plotind = 1;
                else
                    plotind = 2;
                end
            end
            
            % extract factors for this window
            frep = alf{ nday }( ntr ).rates( :, alf{ nday }( ntr ).( whichfieldPlot ) + window );
            % mean center
            frep = frep - repmat( meanFactors(:), 1, numBins );

            % project this data
            dim_reduced_data = pca_proj_mat' * frep;

            linecolor = cmap( cueInd, : );

            plot_mean = 0;

            if ~plot_mean
                % plot the trace

                startind = max(1, nt - trail_length );

                if splitplot
                    subplot(1,nplots,plotind);
                end
                h = Plot.patchline( dim_reduced_data( p2p(1), startind : nt), ...
                                    dim_reduced_data( p2p(2), startind : nt), ...
                                    dim_reduced_data( p2p(3), startind : nt) );
                %set( h, 'edgecolor', linecolor );
                set( h, 'edgecolor', linecolor * thisRtRatio );
                %set( h, 'facealpha', 0.5, 'edgealpha', 0.5 );
                hold on;


                h2 = plot3( dim_reduced_data( p2p(1), nt ), ...
                            dim_reduced_data( p2p(2), nt ), ...
                            dim_reduced_data( p2p(3), nt ), '.');
                set(h2, 'markersize', 10);
                %set(h2, 'color', linecolor );
                set(h2, 'color', linecolor*thisRtRatio );
                
                %set( h, 'edgealpha', 0.1 + thisRtRatio/1.2 );
            else
                % plot the mean
                drdmean = mean( dim_reduced_data' );
                h = plot3( drdmean( p2p(1) ), ...
                           drdmean( p2p(2) ), ...
                           drdmean( p2p(3) ), 'o' );
                set( h, 'markerfacecolor', linecolor, 'markeredgecolor', linecolor );
                hold on;
            end

        end
    end

    if splitplot
        p=[];
        for nn= 1:numel(nplots)
            p(nn) = subplot(1,nplots,nn);
        end
    else
        p = gca();
    end

    clear l l2
    for np = 1:numel(p)
        title(p(np), window( nt ) * binsize_rescaled );
        xlabel(p(np), p2p(1) );
        ylabel(p(np), p2p(2) );
        zlabel(p(np), p2p(3) );
        % this works for dim [6 7 8];
        set(p(np), 'view', [-23.6000    7.6000]);
        
        %set(p(np), 'view', [ -198.0000   -2.8000]);
        %set(p(np), 'view', [-39.2000   19.6000]); % many videos made using this view
        axis(p(np), [ -1.36    0.4   -0.79    0.63   -1.3615    0.9]);
        %axis(p(np), [-1.5    0.4   -1.10    1.7203   -1.9    0.6567]);% this works well for cueOnset
        
        %if ~isempty( paxis )
        %    axis(p(np), paxis );
        %end
        %else
        %    axis('tight');
        %end
        set(p(np),'LooseInset',get(p(np),'TightInset'));
        set(p(np), 'Position', get(p(np), 'OuterPosition') - ...
                   get(p(np), 'TightInset') * [-1 0 1 0; 0 -1 0 1; 0 0 1 0; 0 0 0 1]);
        tmp = axis(p(np));
        l(np, :) = tmp;
    end

    if splitplot
        l2([1 3 5]) = min( l(:, [1 3 5] ) );
        l2([2 4 6]) = max( l(:, [2 4 6] ) );
        axis(p, l2 );
    end
    filename= sprintf( '%s%04g.png', outdir, nt);
    img = getframe(gcf);
    savepng( img.cdata, filename, 4 );
    pause(0.1);
end


%% all held rts
rts = [];
for nd = 1:6
    delayTime = ( [alf{nd}.arrayDim] - [alf{nd}.arrayOnset] ) * binsize_rescaled;
    rts = [rts(:); UEs{ nd }.rt( UEs{ nd }.isHoldTrial(:) & ( delayTime(:) > 875) ) ];
end


%% 2d rt plot
nd = 1;
keep  = UEs{nd}.isHoldTrial;
ts = alf{nd}(keep);


figure(3); clf;
plot3( [ts.arrayOnset] - [ts.cueOnset ], [ts.arrayDim] - [ts.arrayOnset], [ts.rt], 'o');
